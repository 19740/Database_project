--1. A function that returns a report containing information about the number of orders in a given time period, the number of customers
--and the name of the best-selling book.

CREATE OR REPLACE FUNCTION generowanie_raportu(data_od DATE, data_do DATE) RETURN CLOB
AS
v_raport CLOB;
BEGIN

    SELECT ' The number of orders: ' || COUNT(id) INTO v_raport FROM zamowienie
    WHERE data_zamowienia BETWEEN data_od AND data_do;


    SELECT v_raport ||
    ' The number of customers: ' || COUNT(*)
    INTO v_raport FROM klient; 
    

    SELECT 
    v_raport || 
    ' The best-selling book: ' ||
     nazwa 
    INTO v_raport
    FROM 
    ( SELECT ks.nazwa, k.ilosc_sztuk FROM
    koszyk k JOIN ksiazka ks ON k.ksiazka_id = ks.id
    JOIN  zamowienie z ON k.zamowienie_id = z.id
    WHERE data_zamowienia BETWEEN data_od AND data_do
    GROUP BY ks.nazwa, k.ilosc_sztuk
    ORDER BY SUM(ilosc_sztuk) DESC
    )
    WHERE ROWNUM = 1;
    
    RETURN v_raport;
END;
/
-- test
SELECT generowanie_raportu(TO_DATE('2020-10-08', 'YYYY-MM-DD'),  TO_DATE('2021-09-01', 'YYYY-MM-DD')) FROM DUAL;




--2. A function that calculates and returns the total revenue generated by a selected author over a given period of time.
CREATE OR REPLACE FUNCTION calkowity_przychod(data_od DATE, data_do DATE, id_podane INT, kto VARCHAR2)
RETURN VARCHAR AS
v_przychod VARCHAR(100);
BEGIN
    IF kto = 'autor' THEN
        SELECT SUM(ko.cena_netto*ko.ilosc_sztuk)
        INTO v_przychod
        FROM autor a JOIN ksiazka k ON a.id = k.autor_id
        JOIN koszyk ko ON k.id = ko.ksiazka_id
        JOIN zamowienie z ON ko.zamowienie_id = z.id
        WHERE z.data_zamowienia BETWEEN data_od AND data_do AND k.autor_id = id_podane;
    ELSIF kto = 'wydawca' THEN
        SELECT SUM(ko.cena_netto*ko.ilosc_sztuk)
        INTO v_przychod
        FROM wydawca w JOIN ksiazka k ON w.id = k.wydawca_id
        JOIN koszyk ko ON k.id = ko.ksiazka_id
        JOIN zamowienie z ON ko.zamowienie_id = z.id
        WHERE z.data_zamowienia BETWEEN data_od AND data_do AND k.wydawca_id = id_podane;
    ELSE
        v_przychod := 'invalid name';
    END IF;
    
    RETURN v_przychod;
END;
/

--test
SELECT calkowity_przychod(TO_DATE('2020-10-08', 'YYYY-MM-DD'), 
TO_DATE('2021-09-02', 'YYYY-MM-DD'), 3, 'wydawca') FROM dual;





--3. The function calculates the price in the cart (price*quantity*discount) and then adds the delivery price from the order
--and returns the gross price of the entire order

CREATE OR REPLACE FUNCTION ceny_brutto(v_id koszyk.id%TYPE)
RETURN NUMBER IS
v_cena NUMBER;
v_cena_netto koszyk.cena_netto%type;
v_podatek koszyk.podatek%type;
v_rabat koszyk.rabat%type;
v_ilosc_sztuk koszyk.ilosc_sztuk%type;
v_cena2 NUMBER;
v_cena_dostawy zamowienie.cena_dostawy%type;
v_zamowienie INT;
BEGIN 
    SELECT cena_netto INTO v_cena_netto FROM koszyk WHERE id = v_id;
    SELECT podatek INTO v_podatek FROM koszyk WHERE id = v_id;
    SELECT rabat INTO v_rabat FROM koszyk WHERE id = v_id;
    SELECT ilosc_sztuk INTO v_ilosc_sztuk FROM koszyk WHERE id =v_id;
    IF v_rabat > 0 THEN
        v_cena := ((v_cena_netto + ((v_podatek*v_cena_netto)/100) - ((v_rabat*v_cena_netto)/100)) * v_ilosc_sztuk);
    ELSE
        v_cena := ((v_cena_netto + ((v_podatek*v_cena_netto)/100)) * v_ilosc_sztuk);
    END IF;
    
    IF v_cena_dostawy >0 THEN
        SELECT zamowienie_id INTO v_zamowienie FROM koszyk WHERE id = v_id;
        SELECT cena_dostawy INTO v_cena_dostawy FROM zamowienie WHERE id = v_zamowienie;
        v_cena2 := v_cena + v_cena_dostawy;
        RETURN v_cena2;
    ELSE
        RETURN v_cena;
    END IF;
END;

/
--test
SELECT ceny_brutto(4) FROM DUAL;





--4. creating book recommendations based on the purchases of other customers who bought the same product

CREATE OR REPLACE FUNCTION rekomendacje_ksiazek(v_id klient.id%TYPE) RETURN VARCHAR
AS
v_rekomendacje VARCHAR(100);
BEGIN

    SELECT distinct ks.nazwa INTO v_rekomendacje
    FROM ksiazka ks
    JOIN koszyk ko ON ks.id = ko.ksiazka_id
    JOIN zamowienie z ON ko.zamowienie_id = z.id
    JOIN klient k ON z.klient_id = k.id
    WHERE ks.id NOT IN (
    SELECT ks1.id
    FROM ksiazka ks1
    JOIN koszyk ko1 ON ks1.id = ko1.ksiazka_id
    JOIN zamowienie z1 ON ko1.zamowienie_id = z1.id
    JOIN klient k1 ON z1.klient_id = k1.id
    WHERE k1.id = v_id
    )
    AND k.id IN (
    SELECT DISTINCT k2.id
    FROM ksiazka ks2
    JOIN koszyk ko2 ON ks2.id = ko2.ksiazka_id
    JOIN zamowienie z2 ON ko2.zamowienie_id = z2.id
    JOIN klient k2 ON z2.klient_id = k2.id
    WHERE k2.id != v_id
    AND ks2.id IN (
    SELECT ks3.id
    FROM ksiazka ks3
    JOIN koszyk ko3 ON ks3.id = ko3.ksiazka_id
    JOIN zamowienie z3 ON ko3.zamowienie_id = z3.id
    JOIN klient k3 ON z3.klient_id = k3.id
    WHERE k3.id = v_id
    )
    ) AND ROWNUM = 1;

    RETURN v_rekomendacje;
END;

/
--test
SELECT rekomendacje_ksiazek(4) FROM DUAL;





--5. the percentage share of the author in the store's revenue in a given period of time

CREATE OR REPLACE FUNCTION udzial_autora(data_od DATE, data_do DATE, v_id autor.id%TYPE) RETURN NUMBER
AS
v_suma NUMBER;
v_udzial NUMBER;
BEGIN

    SELECT SUM(k.cena_netto * k.ilosc_sztuk)
    INTO v_suma
    FROM koszyk k JOIN ksiazka ks ON k.ksiazka_id = ks.id
    JOIN zamowienie z ON k.zamowienie_id = z.id
    WHERE data_zamowienia BETWEEN data_od AND data_do;
    
    SELECT SUM(k.cena_netto*k.ilosc_sztuk)
    INTO v_udzial
    FROM koszyk k JOIN ksiazka ks ON k.ksiazka_id = ks.id
    JOIN zamowienie z ON k.zamowienie_id = z.id
    WHERE data_zamowienia BETWEEN data_od AND data_do AND autor_id = v_id;
    
    
    RETURN ROUND(v_udzial/v_suma * 100, 2);
END;

/
--test
SELECT udzial_autora(TO_DATE('2020-10-08', 'YYYY-MM-DD'),  
TO_DATE('2021-09-01', 'YYYY-MM-DD'), 6) FROM dual;